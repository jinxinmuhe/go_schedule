// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package task_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TaskManagementClient is the client API for TaskManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagementClient interface {
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error)
	UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskResp, error)
	DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskResp, error)
	SearchTask(ctx context.Context, in *SearchTaskReq, opts ...grpc.CallOption) (*SearchTaskResp, error)
}

type taskManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagementClient(cc grpc.ClientConnInterface) TaskManagementClient {
	return &taskManagementClient{cc}
}

func (c *taskManagementClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error) {
	out := new(CreateTaskResp)
	err := c.cc.Invoke(ctx, "/task_management.TaskManagement/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskResp, error) {
	out := new(UpdateTaskResp)
	err := c.cc.Invoke(ctx, "/task_management.TaskManagement/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskResp, error) {
	out := new(DeleteTaskResp)
	err := c.cc.Invoke(ctx, "/task_management.TaskManagement/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagementClient) SearchTask(ctx context.Context, in *SearchTaskReq, opts ...grpc.CallOption) (*SearchTaskResp, error) {
	out := new(SearchTaskResp)
	err := c.cc.Invoke(ctx, "/task_management.TaskManagement/SearchTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagementServer is the server API for TaskManagement service.
// All implementations must embed UnimplementedTaskManagementServer
// for forward compatibility
type TaskManagementServer interface {
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskResp, error)
	UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskResp, error)
	DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskResp, error)
	SearchTask(context.Context, *SearchTaskReq) (*SearchTaskResp, error)
	mustEmbedUnimplementedTaskManagementServer()
}

// UnimplementedTaskManagementServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagementServer struct {
}

func (UnimplementedTaskManagementServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskManagementServer) UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskManagementServer) DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskManagementServer) SearchTask(context.Context, *SearchTaskReq) (*SearchTaskResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTask not implemented")
}
func (UnimplementedTaskManagementServer) mustEmbedUnimplementedTaskManagementServer() {}

// UnsafeTaskManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagementServer will
// result in compilation errors.
type UnsafeTaskManagementServer interface {
	mustEmbedUnimplementedTaskManagementServer()
}

func RegisterTaskManagementServer(s *grpc.Server, srv TaskManagementServer) {
	s.RegisterService(&_TaskManagement_serviceDesc, srv)
}

func _TaskManagement_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_management.TaskManagement/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_management.TaskManagement/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).UpdateTask(ctx, req.(*UpdateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_management.TaskManagement/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).DeleteTask(ctx, req.(*DeleteTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagement_SearchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagementServer).SearchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task_management.TaskManagement/SearchTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagementServer).SearchTask(ctx, req.(*SearchTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManagement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task_management.TaskManagement",
	HandlerType: (*TaskManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskManagement_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskManagement_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskManagement_DeleteTask_Handler,
		},
		{
			MethodName: "SearchTask",
			Handler:    _TaskManagement_SearchTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
